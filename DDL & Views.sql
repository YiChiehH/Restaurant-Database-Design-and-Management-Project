-- Team 9: Fang-Ying Tien, Jingzhi Zhang, Yaqing Peng, Yiyun Lyu, Yi-Chieh Huang
-- Chinese Restaurant Management System
CREATE DATABASE Team9;
USE Team9;
----------------------------------------------------- 1. Create table -------------------------------------------------------------------
CREATE TABLE dbo.Category (
    categoryId INT IDENTITY NOT NULL PRIMARY KEY,
    categoryName VARCHAR(50) NOT NULL,
    createTime DATETIME DEFAULT GETDATE(),
    updateTime DATETIME DEFAULT GETDATE()
);

CREATE TABLE dbo.Discount (
    discountId INT IDENTITY NOT NULL PRIMARY KEY,
    discountLevel DECIMAL(10, 2),
    createTime DATETIME DEFAULT GETDATE(),
    updateTime DATETIME DEFAULT GETDATE()
);

CREATE TABLE dbo.Dish (
    dishId INT IDENTITY NOT NULL PRIMARY KEY,
    dishName VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    status VARCHAR(50) NOT NULL DEFAULT 'ON',
    categoryId INT NOT NULL REFERENCES Category(categoryId),
    dishDiscountId INT REFERENCES Discount(discountId),
    createTime DATETIME DEFAULT GETDATE(),
    updateTime DATETIME DEFAULT GETDATE()
);

CREATE TABLE SetMeal (
    setMealId INT IDENTITY NOT NULL PRIMARY KEY,
    setMealName VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    status VARCHAR(50) NOT NULL DEFAULT 'ON',
    createTime DATETIME DEFAULT GETDATE(),
    updateTime DATETIME DEFAULT GETDATE()
);

CREATE TABLE DishSetMeal (
    dishSetMealId INT IDENTITY NOT NULL PRIMARY KEY,
    dishId INT NOT NULL REFERENCES Dish(dishId),
    setMealId INT NOT NULL REFERENCES SetMeal(setMealId),
    status VARCHAR(50) NOT NULL DEFAULT 'ON',
    createTime DATETIME DEFAULT GETDATE(),
    updateTime DATETIME DEFAULT GETDATE()
);

CREATE TABLE Flavor (
    flavorId INT IDENTITY NOT NULL PRIMARY KEY,
    flavorName VARCHAR(255) NOT NULL,
    flavorLevel INT NOT NULL,
    createTime DATETIME DEFAULT GETDATE(),
    updateTime DATETIME DEFAULT GETDATE()
);

CREATE TABLE dbo.Address
(
	addressId int IDENTITY NOT NULL PRIMARY KEY ,
	street varchar(255) NOT NULL,
	city varchar(50) NOT NULL,
	state varchar(50) NOT NULL,
	zipCode varchar(50) NOT NULL,
	createTime DATETIME DEFAULT GETDATE(),
	updateTime DATETIME DEFAULT GETDATE()
);

CREATE TABLE dbo.Customer
(
	customerId int IDENTITY NOT NULL PRIMARY KEY ,
	userName varchar(50) NOT NULL,
	password varchar(50) NOT NULL,
	gender varchar(50),
	email varchar(50),
	phone varchar(50),
	status varchar(50) DEFAULT 'ON',
	createTime DATETIME DEFAULT GETDATE(),
	updateTime DATETIME DEFAULT GETDATE()
);

CREATE TABLE dbo.Payment
(
	paymentId int IDENTITY NOT NULL PRIMARY KEY ,
	firstName varchar(255) NOT NULL,
	lastName varchar(255) NOT NULL,
	accountNumber varchar(50) NOT NULL,
	expireDate DATETIME NOT NULL,
	cvv varchar(50) NOT NULL,
	billingAddressId int NOT NULL
		REFERENCES Address(addressId),
	customerId int NOT NULL
		REFERENCES Customer(customerId),
	status varchar(50) DEFAULT 'ON',
	createTime DATETIME DEFAULT GETDATE(),
	updateTime DATETIME DEFAULT GETDATE()
);


CREATE TABLE ShoppingCartItem (
    shoppingCartItemId INT IDENTITY NOT NULL PRIMARY KEY,
    dishId INT REFERENCES Dish(dishId),
    flavorId INT REFERENCES Flavor(flavorId),
    setMealId INT REFERENCES SetMeal(setMealId),
    customerId INT NOT NULL REFERENCES Customer(customerId),
    [count] INT NOT NULL,
    status VARCHAR(50) NOT NULL DEFAULT 'ON',
    createTime DATETIME DEFAULT GETDATE(),
    updateTime DATETIME DEFAULT GETDATE()
);

CREATE TABLE "Order" (
   orderId INT IDENTITY NOT NULL PRIMARY KEY,
   customerId INT NOT NULL REFERENCES "Customer"(customerId),
   tips AS (orderValue * 0.18) PERSISTED,
   orderValue DECIMAL(10,2),
   tax AS (orderValue * 0.1) PERSISTED,
   status VARCHAR(50) DEFAULT 'PROCESSING',
   createTime DATETIME DEFAULT GETDATE(),
   updateTime DATETIME DEFAULT GETDATE()
);

CREATE TABLE OrderDetail (
    orderDetailId INT IDENTITY NOT NULL PRIMARY KEY,
    shoppingCartItemId INT NOT NULL REFERENCES "shoppingCartItem"(shoppingCartItemId),
    orderId INT NOT NULL REFERENCES "Order"(orderId),
    status VARCHAR(50) DEFAULT 'PROCESSING',
    createTime DATETIME DEFAULT GETDATE(),
    updateTime DATETIME DEFAULT GETDATE(),
);

CREATE TABLE dbo.Billing
(
	billingId int IDENTITY NOT NULL PRIMARY KEY ,
	orderId int NOT NULL
		REFERENCES [Order](orderId),
	paymentMethod varchar(50) NOT NULL,
	status varchar(50) DEFAULT 'PROCESSING',
	createTime DATETIME DEFAULT GETDATE(),
	updateTime DATETIME DEFAULT GETDATE()
);



---------------------------------------- 2. Table-level CHECK Constraints based on a function -----------------------------------------
-- Constraint1: Constraint to prevent inserting the dish that is out of stock
-- Create a function to check if the dish is available
CREATE FUNCTION dbo.IsDishAvailable(@dishId INT)
RETURNS VARCHAR(50)
AS 
BEGIN
	DECLARE @status VARCHAR(50)
    	
    SELECT @status = status FROM Dish WHERE DishId = @dishID
    
    RETURN @status;
END;

--Add a constraint on ShoppingCartItem to prevent inserting the dish that is out of stock
ALTER TABLE dbo.[ShoppingCartItem]
ADD CONSTRAINT CHK_Dish_status CHECK (dbo.IsDishAvailable(dishId) = 'ON');

--Add a constraint on DishSetMeal to prevent inserting the dish that is out of stock
ALTER TABLE dbo.[DishSetMeal]
ADD CONSTRAINT CHK_DishSetMeal_status CHECK (dbo.IsDishAvailable(dishId) = 'ON');

--Test ShoppingCartItem
INSERT INTO ShoppingCartItem (dishId, setMealId, customerId, [count], status, createTime, updateTime) VALUES 
(4, 1, 1, 2, 'ON', '2023-01-01T12:00:00', '2023-01-01T12:00:00'), -- status 'ON'
(5, 1, 1, 2, 'ON', '2023-01-01T12:00:00', '2023-01-01T12:00:00'); -- status 'OFF'

--Test DishSetMeal
INSERT INTO DishSetMeal (dishId, setMealId, status, createTime, updateTime) VALUES 
(4, 10, 'ON', '2023-12-01', '2023-12-01'), -- status 'ON'
(5, 10, 'ON', '2023-12-01', '2023-12-01'); -- status 'OFF'

--Housekeeping
DROP FUNCTION IsDishAvailable
ALTER TABLE dbo.ShoppingCartItem
DROP CONSTRAINT CHK_Dish_status
ALTER TABLE dbo.DishSetMeal
DROP CONSTRAINT CHK_DishSetMeal_status



-- Constraint2: Check The Availability Of Shopping Cart Items
CREATE FUNCTION dbo.fnCheckShoppingCartItemResult(@shoppingCartItemId INT)
RETURNS VARCHAR(10) 
AS
BEGIN
    DECLARE @status VARCHAR(50)
    DECLARE @counts INT
    DECLARE @result VARCHAR(10) = 'ON'

    -- Retrieve status and count
    SELECT @status = status, @counts = [count]
    FROM ShoppingCartItem
    WHERE shoppingCartItemId = @shoppingCartItemId;

    IF @status = 'OFF' OR @counts = 0
    BEGIN
	    SET @result = 'OFF'
    END
    RETURN @result
END;

ALTER TABLE OrderDetail ADD CONSTRAINT CheckOrderDetail_ShoppingCartItem CHECK (dbo.fnCheckShoppingCartItemResult(shoppingCartItemId) = 'ON');

-- Test Constraint
INSERT INTO ShoppingCartItem (dishId, flavorId, customerId, [count], status, createTime, updateTime) VALUES
(1,1,1,0,'ON','2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(1,1,1,1,'OFF','2023-06-16T08:00:00', '2023-06-16T08:00:00');
INSERT INTO [Order] (customerId,orderValue,status,createTime,updateTime) VALUES (1, 2,'COMPLETED','2023-06-16T08:00:00', '2023-06-16T08:00:00')
INSERT INTO OrderDetail (shoppingCartItemId,orderId,status,createTime,updateTime) VALUES
--(331, 1, 'COMPLETED','2023-06-16T08:00:00', '2023-06-16T08:00:00');
(332, 1, 'COMPLETED','2023-06-16T08:00:00', '2023-06-16T08:00:00')



-- Constraint3: Constraint to prevent inserting orders for inactive customers
DROP FUNCTION IsActiveCustomer;

CREATE FUNCTION dbo.IsActiveCustomer (@customerId int)
RETURNS VARCHAR(50)
AS
BEGIN
    DECLARE @status VARCHAR(50)
    
    SELECT @status = status FROM Customer WHERE customerId = @customerId
    
    RETURN @status;
END;

ALTER TABLE dbo.[Order]
ADD CONSTRAINT CK_Order_CustomerIsActive
CHECK (dbo.IsActiveCustomer(customerId) = 'ON');

-- Test
-- Insert order for active customer
INSERT INTO dbo.[Order] (customerId, orderValue)
VALUES (3, 100.00); -- Customer 3: mike_jones, status: 'ON', could be inserted
-- Check new inserted order
SELECT *
FROM dbo.[Order]

-- Insert order for inactive customer
INSERT INTO dbo.[Order] (customerId, orderValue)
VALUES (13, 150.00); -- Customer 13: emily_wilson, status: 'OFF', could not be inserted

---Housekeeping
DROP FUNCTION IsActiveCustomer;
ALTER TABLE dbo.[Order]
DROP CONSTRAINT CK_Order_CustomerIsActive;





----------------------------------------------------- 3. Insert data -------------------------------------------------------------------
-- Insert data into Category table   
INSERT INTO dbo.Category (categoryName, createTime, updateTime)
VALUES 

    ('Appetizer', '2022-01-01', '2022-01-01'),
    ('Desert', '2022-01-01', '2022-01-01'),
    ('Soup', '2022-01-01', '2022-01-01'),
    ('Main', '2022-01-01', '2022-01-01'),
    ('Drink', '2022-01-01', '2022-01-01'),
    ('Side Dish', '2022-01-01', '2022-01-01'),
    ('Breakfast', '2022-01-01', '2022-01-01'),
    ('Vegan', '2022-01-01', '2022-01-01'),
    ('BBQ', '2022-01-01', '2022-01-01'),
    ('Hot Pot', '2022-01-01', '2022-01-01');

 --Insert data into Discount table
INSERT INTO dbo.Discount (discountLevel, createTime, updateTime)
VALUES 

    (0.90, '2022-01-01', '2022-01-01'),
	(0.80, '2022-01-01', '2022-01-01'),
    (0.89, '2022-01-01', '2022-01-01'),
    (0.88, '2022-01-01', '2022-01-01'),
    (0.87, '2022-01-01', '2022-01-01'),
    (0.86, '2022-01-01', '2022-01-01'),
    (0.85, '2022-01-01', '2022-01-01'),
    (0.84, '2022-01-01', '2022-01-01'),
    (0.83, '2022-01-01', '2022-01-01'),
    (0.82, '2022-01-01', '2022-01-01'),
    (0.81, '2022-01-01', '2022-01-01');
       

--Insert data into Dish table(with discount)
INSERT INTO dbo.Dish (dishName, price, status, categoryId, dishDiscountId, createTime, updateTime)
VALUES 
    ('Kung Pao Chicken', 10.00, 'ON', 4, 1,'2022-01-01', '2022-01-01'),
    ('Mapo Tofu', 15.00, 'ON', 4, 2, '2022-01-01', '2022-01-01'),
    ('Wonton Soup', 20.00, 'ON', 3, 1, '2022-01-01', '2022-01-01'),   
    ('Braised Pork', 30.00, 'ON', 4, 1, '2022-01-01', '2022-01-01'),   
    ('Spring Rolls', 25.00, 'OFF', 2, 2, '2022-01-01', '2022-01-01'),
    ('Sweet and Sour Pork', 30.00, 'ON', 4, 1, '2022-01-01', '2022-01-01'),
    ('Hot and Sour Soup', 20.00, 'ON', 3, 1, '2022-01-01', '2022-01-01'),
    ('Sichuan Noodles', 15.00, 'ON', 4, 2, '2022-01-01', '2022-01-01'),
    ('Peking Duck Rolls', 25.00, 'ON', 1, 1, '2022-01-01', '2022-01-01'),
    ('Stir-fried Green Beans', 12.00, 'ON', 4, 2, '2022-01-01', '2022-01-01'),
    ('Spring Onion Pancake', 8.00, 'ON', 1, 2, '2022-01-01', '2022-01-01'),
    ('Vegetable Spring Rolls', 10.00, 'OFF', 1, 1, '2022-01-01', '2022-01-01'),
    ('Crispy Shrimp Wontons', 12.00, 'ON', 1, 1, '2022-01-01', '2022-01-01'),
    ('Mango Sticky Rice', 12.00, 'ON', 2, 2, '2022-01-01', '2022-01-01'),
    ('Red Bean Paste Buns', 8.00, 'ON', 2, 1, '2022-01-01', '2022-01-01'),
    ('Coconut Tapioca Pudding', 10.00, 'ON', 2, 2, '2022-01-01', '2022-01-01'),
    ('Tom Yum Soup', 15.00, 'ON', 3, 1, '2022-01-01', '2022-01-01'),
    ('Egg Drop Soup', 10.00, 'ON', 3, 1, '2022-01-01', '2022-01-01'),
    ('Chinese Corn Soup', 12.00, 'ON', 3, 1, '2022-01-01', '2022-01-01'),
    ('Coconut Hot Pot', 40.00, 'ON', 10, 1, '2022-01-01', '2022-01-01'),
	('Spicy Hot Pot', 40.00, 'ON', 10, 1, '2022-01-01', '2022-01-01'),
	('Mongolian Beef', 32.00, 'ON', 4, 1, '2022-01-01', '2022-01-01'),
    ('Szechuan Shrimp', 29.00, 'ON', 4, 1, '2022-01-01', '2022-01-01'),
    ('Cashew Chicken', 26.00, 'ON', 4, 2, '2022-01-01', '2022-01-01'),
    ('Eggplant with Garlic Sauce', 24.00, 'ON', 4, 1, '2022-01-01', '2022-01-01'),
    ('Hot and Spicy Beef', 30.00, 'ON', 4, 2, '2022-01-01', '2022-01-01'),
    ('Sweet and Sour Fish', 27.00, 'ON', 4, 1, '2022-01-01', '2022-01-01'),
    ('Cantonese Chow Mein', 25.00, 'ON', 4, 2, '2022-01-01', '2022-01-01'),
    ('Stir-fried Tofu with Vegetables', 23.00, 'ON', 4, 1, '2022-01-01', '2022-01-01'),
    ('Hunan Pork', 31.00, 'ON', 4, 2, '2022-01-01', '2022-01-01'),
    ('Shrimp with Lobster Sauce', 25.00, 'ON', 4, 1, '2022-01-01', '2022-01-01'),
    ('Kung Pao Shrimp', 22.00, 'ON', 4, 1, '2022-01-01', '2022-01-01'),
    ('General Tso’s Chicken', 20.00, 'ON', 4, 1, '2022-01-01', '2022-01-01');


--Insert data into Dish table(without discount)   
INSERT INTO dbo.Dish (dishName, price, status, categoryId, createTime, updateTime)
VALUES 
	('Fried Rice', 25.00, 'ON', 4, '2022-01-01', '2022-01-01'),
	('Peking Duck', 35.00, 'ON', 4, '2022-01-01', '2022-01-01'),
	('Dim Sum', 20.00, 'ON', 1,'2022-01-01', '2022-01-01'),
	('Coca Cola', 5.00, 'ON', 5, '2022-01-01', '2022-01-01'),
	('Jasmine Tea', 3.00, 'ON', 5, '2022-01-01', '2022-01-01'),	 
    ('Lychee Iced Tea', 4.00, 'ON', 5, '2022-01-01', '2022-01-01'),
    ('Honey Lemonade', 6.00, 'ON', 5, '2022-01-01', '2022-01-01');


-- Insert Data Into SetMeal

INSERT INTO SetMeal (setMealName, price, status, createTime, updateTime) VALUES 
('Special A', 25.99, 'ON', '2022-01-01T08:00:00', '2022-01-01T12:00:00'),
('Farewell A', 24.99, 'ON', '2022-02-09T08:00:00', '2022-02-09T12:00:00'),
('Farewell B', 24.99, 'ON', '2022-02-09T08:00:00', '2022-02-09T12:00:00'),
('Farewell C', 24.99, 'ON', '2022-03-28T08:00:00', '2022-03-28T12:00:00'),
('Fresh A', 24.99, 'ON', '2022-04-01T08:00:00', '2022-04-01T12:00:00'),
('Fresh B', 31.99, 'ON', '2022-04-02T08:00:00', '2022-04-02T12:00:00'),
('Feast', 25.99, 'ON', '2022-05-01T08:00:00', '2022-05-01T12:00:00'),
('Special B', 19.99, 'ON', '2022-06-05T08:00:00', '2022-06-05T12:00:00'),
('Kickoff', 26.99, 'ON', '2022-07-01T08:00:00', '2022-07-01T12:00:00'),
('Beginnings A', 26.99, 'ON', '2022-08-01T08:00:00', '2022-08-01T12:00:00'),
('Beginnings B', 33.99, 'ON', '2022-08-02T08:00:00', '2022-08-02T12:00:00'),
('Start', 27.99, 'ON', '2022-09-01T08:00:00', '2022-09-01T12:00:00'),
('Opener', 28.99, 'ON', '2022-10-01T08:00:00', '2022-10-01T12:00:00'),
('Beginnings C', 29.99, 'OFF', '2022-11-01T08:00:00', '2022-11-01T12:00:00'),
('Winter', 29.99, 'OFF', '2022-12-01T08:00:00', '2022-12-01T12:00:00');

-- Insert Data Into DishSetMeal
INSERT INTO DishSetMeal (dishId, setMealId, status, createTime, updateTime) VALUES 
(1, 1, 'ON', '2022-01-01', '2022-01-01'),
(2, 1, 'ON', '2022-01-02', '2022-01-02'),
(3, 2, 'ON', '2022-01-01', '2022-01-01'),
(4, 2, 'ON', '2022-01-02', '2022-01-02'),
(6, 3, 'ON', '2022-01-02', '2022-01-02'),
(7, 4, 'ON', '2022-01-01', '2022-01-01'),
(8, 4, 'ON', '2022-01-02', '2022-01-02'),
(9, 5, 'ON', '2022-01-01', '2022-01-01'),
(10, 5, 'ON', '2022-01-02', '2022-01-02'),
(11, 6, 'ON', '2022-03-01', '2022-03-01'),
(13, 7, 'ON', '2022-03-01', '2022-03-01'),
(14, 7, 'ON', '2022-03-02', '2022-03-02'),
(15, 8, 'ON', '2022-03-01', '2022-03-01'),
(16, 8, 'ON', '2022-04-02', '2022-04-02'),
(17, 9, 'ON', '2022-04-01', '2022-04-01'),
(18, 9, 'ON', '2022-04-02', '2022-04-02'),
(19, 10, 'ON', '2022-04-01', '2022-04-01'),
(20, 10, 'ON', '2022-04-02', '2022-04-02');


INSERT INTO Flavor ( flavorName, flavorLevel, createTime, updateTime) VALUES
( 'Mild', 1, '2022-01-01', '2022-01-01'),
( 'Medium', 2,'2022-01-01', '2022-01-01'),
( 'Spicy', 3, '2022-01-01', '2022-01-01'),
( 'Extra Spicy', 4, '2022-01-01', '2022-01-01'),
( 'Normal Sugar', 3, '2022-01-01', '2022-01-01'),
( 'Less Sugar', 2, '2022-01-01', '2022-01-01'),
( 'No Sugar', 1, '2022-01-01', '2022-01-01'),
( 'Normal Ice', 3, '2022-01-01', '2022-01-01'),
( 'Light Ice', 2, '2022-01-01', '2022-01-01'),
( 'No Ice', 1, '2022-01-01', '2022-01-01');

-- Insert Address data
INSERT INTO dbo.Address (street, city, state, zipCode, createTime, updateTime)
VALUES 
    ('123 Main St', 'Springfield', 'IL', '62701', '2022-01-01', '2022-01-01'),
    ('456 Oak Ave', 'Riverside', 'CA', '92501', '2022-01-01', '2022-01-01'),
    ('789 Pine Ln', 'Portland', 'OR', '97201', '2022-01-01', '2022-01-01'),
    ('321 Elm St', 'New York', 'NY', '10001', '2022-01-01', '2022-01-01'),
    ('555 Cedar Rd', 'Seattle', 'WA', '98101', '2022-01-01', '2022-01-01'),
    ('888 Maple Ave', 'Boston', 'MA', '02101', '2022-01-01', '2022-01-01'),
    ('222 Birch Blvd', 'San Francisco', 'CA', '94101', '2022-01-01', '2022-01-01'),
    ('777 Willow Dr', 'Chicago', 'IL', '60601', '2022-01-01', '2022-01-01'),
    ('999 Oak St', 'Dallas', 'TX', '75201', '2022-01-01', '2022-01-01'),
    ('444 Pine Rd', 'Miami', 'FL', '33101', '2022-01-01', '2022-01-01'),
    ('101 Sunset Blvd', 'Los Angeles', 'CA', '90001', '2022-01-01', '2022-01-01'),
    ('222 River St', 'Denver', 'CO', '80201', '2022-01-01', '2022-01-01'),
    ('333 Lake Ave', 'Houston', 'TX', '77001', '2022-01-01', '2022-01-01'),
    ('444 Forest Rd', 'Phoenix', 'AZ', '85001', '2022-01-01', '2022-01-01'),
    ('555 Mountain View Dr', 'Las Vegas', 'NV', '89101', '2022-01-01', '2022-01-01');
   

-- Insert active Customer data
INSERT INTO dbo.Customer (userName, password, gender, email, phone, createTime, updateTime)
VALUES 
    ('john_doe', 'password123', 'Male', 'john.doe@example.com', '123-456-7890', '2022-01-01', '2022-01-01'),
    ('jane_smith', 'securePW456', 'Female', 'jane.smith@example.com', '987-654-3210', '2022-01-01', '2022-01-01'),
    ('mike_jones', 'passw0rd', 'Male', 'mike.jones@example.com', '555-123-4567', '2022-01-01', '2022-01-01'),
    ('sarah_green', 'green123', 'Female', 'sarah.green@example.com', '333-999-8888', '2022-01-01', '2022-01-01'),
    ('alex_carter', 'carter456', 'Male', 'alex.carter@example.com', '777-222-1111', '2022-01-01', '2022-01-01'),
    ('lisa_brown', 'brownPass', 'Female', 'lisa.brown@example.com', '444-777-0000', '2022-01-01', '2022-01-01'),
    ('tom_wilson', 'wilson789', 'Male', 'tom.wilson@example.com', '666-444-2222', '2022-01-01', '2022-01-01'),
    ('emily_adams', 'adams2020', 'Female', 'emily.adams@example.com', '111-888-9999', '2022-01-01', '2022-01-01'),
    ('chris_evans', 'evansPWD', 'Male', 'chris.evans@example.com', '999-000-3333', '2022-01-01', '2022-01-01'),
    ('amy_white', 'whitePass', 'Female', 'amy.white@example.com', '222-555-6666', '2022-01-01', '2022-01-01');

-- Insert some inactive Customer data to test the constraints
INSERT INTO dbo.Customer (userName, password, gender, email, phone, status, createTime, updateTime)
VALUES 
    ('mary_johnson', 'p@ssw0rd', 'Female', 'mary.johnson@example.com', '1112223333', 'OFF', '2022-01-01', '2022-01-01'),
    ('samuel_brown', 'securepass', 'Male', 'samuel.brown@example.com', '4445556666', 'OFF', '2022-01-01', '2022-01-01'),
    ('emily_wilson', 'password123', 'Female', 'emily.wilson@example.com', '7778889999', 'OFF', '2022-01-01', '2022-01-01'),
    ('david_miller', 'mypass123', 'Male', 'david.miller@example.com', '9998887777', 'OFF', '2022-01-01', '2022-01-01'),
    ('olivia_thomas', 'securepassword', 'Female', 'olivia.thomas@example.com', '3332221111', 'OFF', '2022-01-01', '2022-01-01');

    
-- Insert Payment data
INSERT INTO dbo.Payment (firstName, lastName, accountNumber, expireDate, cvv, billingAddressId, customerId, createTime, updateTime)
VALUES 
    ('John', 'Doe', '1234567890123456', '2025-03-01', '123', 1, 1, '2022-01-01', '2022-01-01'),
    ('Jane', 'Smith', '9876543210987654', '2024-06-01', '456', 2, 2, '2022-01-01', '2022-01-01'),
    ('Mike', 'Jones', '5555666677778888', '2026-09-01', '789', 3, 3, '2022-01-01', '2022-01-01'),
    ('Sarah', 'Green', '4444333322221111', '2025-12-01', '321', 4, 4, '2022-01-01', '2022-01-01'),
    ('Alex', 'Carter', '9999888877776666', '2025-03-01', '654', 5, 5, '2022-01-01', '2022-01-01'),
    ('Lisa', 'Brown', '1111222233334444', '2024-08-01', '987', 6, 6, '2022-01-01', '2022-01-01'),
    ('Tom', 'Wilson', '7777666655554444', '2026-11-01', '456', 7, 7, '2022-01-01', '2022-01-01'),
    ('Emily', 'Adams', '8888777766665555', '2025-02-01', '789', 8, 8, '2022-01-01', '2022-01-01'),
    ('Chris', 'Evans', '3333444455556666', '2024-05-01', '123', 9, 9, '2022-01-01', '2022-01-01'),
    ('Amy', 'White', '2222111133334444', '2025-10-01', '321', 10, 10, '2022-01-01', '2022-01-01');
   
-- Insert payment with status "OFF" for inactive customers
INSERT INTO dbo.Payment (firstName, lastName, accountNumber, expireDate, cvv, billingAddressId, customerId, status, createTime, updateTime)
VALUES 
('Mary', 'Johnson', '1111222233334444', '2024-03-01', '123', 11, 11, 'OFF', '2022-01-01', '2022-01-01'),
('Samuel', 'Brown', '4444555566667777', '2024-06-01', '456', 12, 12, 'OFF', '2022-01-01', '2022-01-01'),
('Emily', 'Wilson', '7777888899990000', '2024-09-01', '789', 13, 13, 'OFF', '2022-01-01', '2022-01-01'),
('David', 'Miller', '9999888877776666', '2024-12-01', '321', 14, 14, 'OFF', '2022-01-01', '2022-01-01'),
('Olivia', 'Thomas', '3333222211110000', '2024-12-01', '654', 15, 15, 'OFF', '2022-01-01', '2022-01-01');  


-- Insert Data Into ShoppingCartItem SetMeal Only
INSERT INTO ShoppingCartItem (setMealId, customerId, [count], status, createTime, updateTime) VALUES
(1, 1, 2, 'ON', '2023-01-01T12:00:00', '2023-01-01T12:00:00'),
(2, 2, 1, 'ON', '2023-01-02T12:00:00', '2023-01-02T12:00:00'),
(3, 5, 2, 'ON', '2023-01-05T12:00:00', '2023-01-05T12:00:00'),
(4, 3, 1, 'ON', '2023-01-08T12:00:00', '2023-01-08T12:00:00'),
(5, 5, 3, 'ON', '2023-01-10T12:00:00', '2023-01-10T12:00:00'),
(6, 7, 1, 'ON', '2023-01-12T12:00:00', '2023-01-12T12:00:00'),
(7, 9, 2, 'ON', '2023-01-14T12:00:00', '2023-01-14T12:00:00'),
(8, 1, 1, 'ON', '2023-01-16T12:00:00', '2023-01-16T12:00:00'),
(9, 3, 1, 'ON', '2023-01-18T12:00:00', '2023-01-18T12:00:00'),
(10, 5, 3, 'ON', '2023-01-20T12:00:00', '2023-01-20T12:00:00'),
(1, 7, 1, 'ON', '2023-07-22T12:00:00', '2023-07-22T12:00:00'),
(2, 9, 2, 'ON', '2023-07-24T12:00:00', '2023-07-24T12:00:00'),
(3, 1, 1, 'ON', '2023-07-26T12:00:00', '2023-07-26T12:00:00'),
(4, 3, 1, 'ON', '2023-08-28T12:00:00', '2023-08-28T12:00:00'),
(5, 5, 3, 'ON', '2023-08-30T12:00:00', '2023-08-30T12:00:00'),
(1, 7, 1, 'ON', '2023-01-31T12:10:00', '2023-01-31T12:10:00'),
(2, 9, 2, 'ON', '2023-01-31T12:30:00', '2023-01-31T12:30:00'),
(3, 1, 1, 'ON', '2023-01-31T12:50:00', '2023-01-31T12:50:00'),
(4, 3, 1, 'ON', '2023-01-31T13:10:00', '2023-01-31T13:10:00'),
(5, 5, 3, 'ON', '2023-01-31T13:30:00', '2023-01-31T13:30:00'),
(6, 7, 1, 'ON', '2023-01-31T13:50:00', '2023-01-31T13:50:00'),
(7, 9, 2, 'ON', '2023-01-31T14:10:00', '2023-01-31T14:10:00'),
(8, 1, 1, 'ON', '2023-01-31T14:30:00', '2023-01-31T14:30:00'),
(9, 3, 1, 'ON', '2023-01-31T14:50:00', '2023-01-31T14:50:00'),
(10, 5, 3, 'ON', '2023-01-31T15:10:00', '2023-01-31T15:10:00'),
(5, 9, 2, 'ON', '2023-09-02T08:00:00', '2023-09-02T12:00:00'),
(6, 1, 1, 'ON', '2023-09-04T08:00:00', '2023-09-04T12:00:00'),
(7, 3, 1, 'ON', '2023-09-06T08:00:00', '2023-09-06T12:00:00'),
(8, 5, 3, 'ON', '2023-10-08T08:00:00', '2023-10-08T12:00:00'),
(9, 7, 1, 'ON', '2023-10-10T08:00:00', '2023-10-10T12:00:00'),
(1, 9, 2, 'ON', '2023-02-12T08:00:00', '2023-02-12T12:00:00'),
(2, 1, 1, 'ON', '2023-02-14T08:00:00', '2023-02-14T12:00:00'),
(3, 3, 1, 'ON', '2023-02-16T08:00:00', '2023-02-16T12:00:00'),
(4, 5, 3, 'ON', '2023-02-18T08:00:00', '2023-02-18T12:00:00'),
(5, 7, 1, 'ON', '2023-02-20T08:00:00', '2023-02-20T12:00:00'),
(6, 9, 2, 'ON', '2023-02-22T08:00:00', '2023-02-22T12:00:00'),
(7, 1, 1, 'ON', '2023-02-24T08:00:00', '2023-02-24T12:00:00'),
(8, 3, 1, 'ON', '2023-02-26T08:00:00', '2023-02-26T12:00:00'),
(9, 5, 3, 'ON', '2023-02-28T08:00:00', '2023-02-28T12:00:00'),
(10, 7, 1, 'ON', '2023-02-28T09:00:00', '2023-02-28T13:00:00'),
(10, 9, 2, 'ON', '2023-12-28T10:00:00', '2023-12-28T14:00:00'),
(1, 1, 1, 'ON', '2023-12-28T11:00:00', '2023-12-28T15:00:00'),
(3, 3, 1, 'ON', '2023-12-28T12:00:00', '2023-12-28T16:00:00'),
(4, 5, 3, 'ON', '2023-12-28T13:00:00', '2023-12-28T17:00:00'),
(6, 7, 1, 'ON', '2023-11-28T14:00:00', '2023-11-28T18:00:00'),
(1, 9, 2, 'ON', '2023-02-28T15:00:00', '2023-02-28T19:00:00'),
(2, 1, 1, 'ON', '2023-02-28T16:00:00', '2023-02-28T20:00:00'),
(3, 3, 1, 'ON', '2023-02-28T17:00:00', '2023-02-28T21:00:00'),
(4, 5, 3, 'ON', '2023-02-28T18:00:00', '2023-02-28T22:00:00'),
(5, 7, 1, 'ON', '2023-02-28T19:00:00', '2023-02-28T23:00:00'),
(2, 9, 2, 'ON', '2023-02-28T20:00:00', '2023-02-28T00:00:00'),
(5, 5, 1, 'ON', '2023-03-02T08:00:00', '2023-03-02T12:00:00'),
(6, 7, 1, 'ON', '2023-03-04T08:00:00', '2023-03-04T12:00:00'),
(7, 9, 2, 'ON', '2023-03-06T08:00:00', '2023-03-06T12:00:00'),
(8, 1, 1, 'ON', '2023-03-08T08:00:00', '2023-03-08T12:00:00'),
(9, 3, 1, 'ON', '2023-03-10T08:00:00', '2023-03-10T12:00:00'),
(10, 5, 3, 'ON', '2023-03-12T08:00:00', '2023-03-12T12:00:00'),
(1, 7, 1, 'ON', '2023-11-14T08:00:00', '2023-11-14T12:00:00'),
(2, 9, 2, 'ON', '2023-11-16T08:00:00', '2023-11-16T12:00:00'),
(5, 1, 1, 'ON', '2023-11-18T08:00:00', '2023-11-18T12:00:00'),
(7, 3, 1, 'ON', '2023-11-20T08:00:00', '2023-11-20T12:00:00'),
(9, 5, 2, 'ON', '2023-12-02T08:00:00', '2023-12-02T12:00:00'),
(1, 7, 1, 'ON', '2023-04-04T08:00:00', '2023-04-04T12:00:00'),
(2, 9, 2, 'ON', '2023-04-06T08:00:00', '2023-04-06T12:00:00'),
(3, 1, 3, 'ON', '2023-04-08T08:00:00', '2023-04-08T12:00:00'),
(4, 3, 2, 'ON', '2023-04-10T08:00:00', '2023-04-10T12:00:00'),
(5, 3, 1, 'ON', '2023-04-20T08:00:00', '2023-04-20T12:00:00'),
(6, 5, 1, 'ON', '2023-04-12T08:00:00', '2023-04-12T12:00:00'),
(7, 7, 3, 'ON', '2023-04-14T08:00:00', '2023-04-14T12:00:00'),
(8, 9, 2, 'ON', '2023-04-16T08:00:00', '2023-04-16T12:00:00'),
(9, 1, 3, 'ON', '2023-04-18T08:00:00', '2023-04-18T12:00:00'),
(10, 9, 1, 'ON', '2023-05-06T08:00:00', '2023-05-06T12:00:00'),
(2, 10, 3, 'ON', '2023-05-07T08:00:00', '2023-05-07T12:00:00'),
(3, 3, 2, 'ON', '2023-05-10T08:00:00', '2023-05-10T12:00:00'),
(4, 5, 1, 'ON', '2023-05-12T08:00:00', '2023-05-12T12:00:00'),
(5, 7, 3, 'ON', '2023-05-14T08:00:00', '2023-05-14T12:00:00'),
(6, 10, 1, 'ON', '2023-05-17T08:00:00', '2023-05-17T12:00:00'),
(7, 2, 2, 'ON', '2023-05-19T08:00:00', '2023-05-19T12:00:00'),
(8, 6, 3, 'ON', '2023-06-03T08:00:00', '2023-06-03T12:00:00'),
(9, 8, 2, 'ON', '2023-06-05T08:00:00', '2023-06-05T12:00:00'),
(10, 10, 1, 'ON', '2023-06-07T08:00:00', '2023-06-07T12:00:00'),
(1, 9, 1, 'ON', '2023-10-06T08:00:00', '2023-10-06T12:00:00'),
(6, 2, 1, 'ON', '2023-06-19T08:00:00', '2023-06-19T12:00:00'),
(9, 10, 3, 'ON', '2023-09-07T08:00:00', '2023-09-07T12:00:00'),
(10, 2, 1, 'ON', '2023-11-09T08:00:00', '2023-11-09T12:00:00');

-- Dish Only Without Choosing Any Flavor
INSERT INTO ShoppingCartItem (dishId, customerId, [count], status, createTime, updateTime) VALUES
(17, 4, 2, 'ON', '2023-01-09T08:00:00', '2023-01-09T08:00:00'),
(8, 6, 2, 'ON', '2023-11-05T08:00:00', '2023-11-05T08:00:00'),
(33, 2, 1, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(17, 3, 1, 'ON', '2023-06-24T08:00:00', '2023-06-24T08:00:00'),
(32, 5, 1, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(25, 1, 3, 'ON', '2023-03-10T08:00:00', '2023-03-10T08:00:00'),
(20, 10, 1, 'ON', '2023-07-22T08:00:00', '2023-07-22T08:00:00'),
(14, 1, 1, 'ON', '2023-03-10T08:00:00', '2023-03-10T08:00:00'),
(4, 4, 1, 'ON', '2023-01-09T08:00:00', '2023-01-09T08:00:00'),
(8, 8, 3, 'ON', '2023-01-03T08:00:00', '2023-01-03T08:00:00'),
(35, 5, 1, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(39, 9, 2, 'ON', '2023-10-23T08:00:00', '2023-10-23T08:00:00'),
(30, 4, 2, 'ON', '2023-01-09T08:00:00', '2023-01-09T08:00:00'),
(14, 1, 3, 'ON', '2023-03-10T08:00:00', '2023-03-10T08:00:00'),
(1, 1, 1, 'ON', '2023-03-10T08:00:00', '2023-03-10T08:00:00'),
(31, 1, 1, 'ON', '2023-03-10T08:00:00', '2023-03-10T08:00:00'),
(39, 8, 2, 'ON', '2023-01-03T08:00:00', '2023-01-03T08:00:00'),
(22, 9, 3, 'ON', '2023-10-23T08:00:00', '2023-10-23T08:00:00'),
(16, 8, 1, 'ON', '2023-01-03T08:00:00', '2023-01-03T08:00:00'),
(23, 6, 1, 'ON', '2023-11-05T08:00:00', '2023-11-05T08:00:00'),
(32, 5, 1, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(30, 1, 2, 'ON', '2023-03-10T08:00:00', '2023-03-10T08:00:00'),
(40, 5, 2, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(22, 2, 3, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(23, 1, 3, 'ON', '2023-03-10T08:00:00', '2023-03-10T08:00:00'),
(10, 1, 2, 'ON', '2023-03-10T08:00:00', '2023-03-10T08:00:00'),
(1, 5, 2, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(26, 6, 3, 'ON', '2023-11-05T08:00:00', '2023-11-05T08:00:00'),
(31, 2, 3, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(23, 10, 2, 'ON', '2023-07-22T08:00:00', '2023-07-22T08:00:00'),
(24, 4, 1, 'ON', '2023-01-09T08:00:00', '2023-01-09T08:00:00'),
(3, 5, 3, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(1, 3, 2, 'ON', '2023-06-24T08:00:00', '2023-06-24T08:00:00'),
(9, 6, 1, 'ON', '2023-11-05T08:00:00', '2023-11-05T08:00:00'),
(30, 5, 1, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(39, 2, 3, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(27, 9, 3, 'ON', '2023-10-23T08:00:00', '2023-10-23T08:00:00'),
(38, 7, 2, 'ON', '2023-06-12T08:00:00', '2023-06-12T08:00:00'),
(26, 7, 3, 'ON', '2023-06-12T08:00:00', '2023-06-12T08:00:00'),
(3, 4, 1, 'ON', '2023-01-09T08:00:00', '2023-01-09T08:00:00'),
(11, 4, 3, 'ON', '2023-01-09T08:00:00', '2023-01-09T08:00:00'),
(33, 1, 2, 'ON', '2023-03-10T08:00:00', '2023-03-10T08:00:00'),
(11, 6, 3, 'ON', '2023-11-05T08:00:00', '2023-11-05T08:00:00'),
(7, 9, 2, 'ON', '2023-10-23T08:00:00', '2023-10-23T08:00:00'),
(4, 4, 2, 'ON', '2023-01-09T08:00:00', '2023-01-09T08:00:00'),
(1, 4, 2, 'ON', '2023-01-09T08:00:00', '2023-01-09T08:00:00'),
(1, 10, 1, 'ON', '2023-07-22T08:00:00', '2023-07-22T08:00:00'),
(32, 2, 2, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(22, 7, 1, 'ON', '2023-06-12T08:00:00', '2023-06-12T08:00:00'),
(19, 3, 2, 'ON', '2023-06-24T08:00:00', '2023-06-24T08:00:00'),
(10, 5, 3, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(27, 9, 1, 'ON', '2023-10-23T08:00:00', '2023-10-23T08:00:00'),
(3, 10, 3, 'ON', '2023-07-22T08:00:00', '2023-07-22T08:00:00'),
(29, 3, 1, 'ON', '2023-06-24T08:00:00', '2023-06-24T08:00:00'),
(36, 6, 3, 'ON', '2023-11-05T08:00:00', '2023-11-05T08:00:00'),
(6, 9, 3, 'ON', '2023-10-23T08:00:00', '2023-10-23T08:00:00'),
(8, 6, 1, 'ON', '2023-11-05T08:00:00', '2023-11-05T08:00:00'),
(3, 2, 1, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(1, 3, 1, 'ON', '2023-06-24T08:00:00', '2023-06-24T08:00:00'),
(11, 8, 3, 'ON', '2023-01-03T08:00:00', '2023-01-03T08:00:00'),
(21, 4, 1, 'ON', '2023-01-09T08:00:00', '2023-01-09T08:00:00'),
(33, 6, 1, 'ON', '2023-11-05T08:00:00', '2023-11-05T08:00:00'),
(34, 6, 1, 'ON', '2023-11-05T08:00:00', '2023-11-05T08:00:00'),
(37, 5, 3, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(9, 9, 1, 'ON', '2023-10-23T08:00:00', '2023-10-23T08:00:00'),
(23, 5, 3, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(13, 4, 2, 'ON', '2023-01-09T08:00:00', '2023-01-09T08:00:00'),
(35, 5, 3, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(25, 5, 1, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(18, 7, 1, 'ON', '2023-06-12T08:00:00', '2023-06-12T08:00:00'),
(32, 3, 3, 'ON', '2023-06-24T08:00:00', '2023-06-24T08:00:00'),
(14, 5, 1, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(20, 2, 1, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(18, 9, 1, 'ON', '2023-10-23T08:00:00', '2023-10-23T08:00:00'),
(35, 3, 2, 'ON', '2023-06-24T08:00:00', '2023-06-24T08:00:00'),
(25, 1, 3, 'ON', '2023-03-10T08:00:00', '2023-03-10T08:00:00'),
(27, 5, 1, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(36, 10, 1, 'ON', '2023-07-22T08:00:00', '2023-07-22T08:00:00'),
(34, 1, 1, 'ON', '2023-03-10T08:00:00', '2023-03-10T08:00:00'),
(17, 10, 2, 'ON', '2023-07-22T08:00:00', '2023-07-22T08:00:00'),
(14, 1, 2, 'ON', '2023-03-10T08:00:00', '2023-03-10T08:00:00'),
(37, 10, 2, 'ON', '2023-07-22T08:00:00', '2023-07-22T08:00:00'),
(36, 2, 3, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(32, 2, 3, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(32, 2, 2, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(17, 6, 1, 'ON', '2023-11-05T08:00:00', '2023-11-05T08:00:00'),
(35, 5, 1, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(8, 10, 2, 'ON', '2023-07-22T08:00:00', '2023-07-22T08:00:00'),
(17, 1, 1, 'ON', '2023-03-10T08:00:00', '2023-03-10T08:00:00'),
(24, 10, 1, 'ON', '2023-07-22T08:00:00', '2023-07-22T08:00:00'),
(11, 8, 2, 'ON', '2023-01-03T08:00:00', '2023-01-03T08:00:00'),
(35, 2, 3, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(23, 9, 2, 'ON', '2023-10-23T08:00:00', '2023-10-23T08:00:00'),
(26, 2, 2, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(40, 2, 1, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(31, 2, 2, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(31, 5, 2, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(17, 6, 2, 'ON', '2023-11-05T08:00:00', '2023-11-05T08:00:00'),
(3, 5, 1, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(4, 4, 2, 'ON', '2023-01-09T08:00:00', '2023-01-09T08:00:00'),
(33, 4, 2, 'ON', '2023-01-09T08:00:00', '2023-01-09T08:00:00'),
(25, 7, 2, 'ON', '2023-06-12T08:00:00', '2023-06-12T08:00:00'),
(21, 1, 3, 'ON', '2023-03-10T08:00:00', '2023-03-10T08:00:00'),
(32, 7, 2, 'ON', '2023-06-12T08:00:00', '2023-06-12T08:00:00'),
(26, 4, 3, 'ON', '2023-01-09T08:00:00', '2023-01-09T08:00:00'),
(32, 3, 3, 'ON', '2023-06-24T08:00:00', '2023-06-24T08:00:00'),
(16, 4, 2, 'ON', '2023-01-09T08:00:00', '2023-01-09T08:00:00'),
(19, 2, 2, 'ON', '2023-10-26T08:00:00', '2023-10-26T08:00:00'),
(2, 5, 3, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(39, 7, 1, 'ON', '2023-06-12T08:00:00', '2023-06-12T08:00:00'),
(6, 6, 2, 'ON', '2023-11-05T08:00:00', '2023-11-05T08:00:00'),
(19, 8, 1, 'ON', '2023-01-03T08:00:00', '2023-01-03T08:00:00'),
(11, 5, 1, 'ON', '2023-11-14T08:00:00', '2023-11-14T08:00:00'),
(24, 7, 1, 'ON', '2023-06-12T08:00:00', '2023-06-12T08:00:00'),
(30, 10, 2, 'ON', '2023-07-22T08:00:00', '2023-07-22T08:00:00'),
(23, 3, 3, 'ON', '2023-06-24T08:00:00', '2023-06-24T08:00:00'),
(26, 8, 2, 'ON', '2023-01-03T08:00:00', '2023-01-03T08:00:00'),
(35, 3, 3, 'ON', '2023-06-24T08:00:00', '2023-06-24T08:00:00'),
(21, 3, 3, 'ON', '2023-06-24T08:00:00', '2023-06-24T08:00:00'),
(1, 6, 2, 'ON', '2023-11-05T08:00:00', '2023-11-05T08:00:00');
					
-- Dish With Flavor
INSERT INTO ShoppingCartItem (dishId, flavorId, customerId, [count], status, createTime, updateTime) VALUES
(27, 1, 7, 3, 'ON', '2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(1, 2, 10, 2, 'ON', '2023-08-26T08:00:00', '2023-08-26T08:00:00'),
(32, 1, 4, 2, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(20, 2, 9, 3, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(25, 1, 8, 1, 'ON', '2023-05-28T08:00:00', '2023-05-28T08:00:00'),
(22, 4, 4, 3, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(27, 1, 5, 1, 'ON', '2023-02-22T08:00:00', '2023-02-22T08:00:00'),
(27, 2, 5, 3, 'ON', '2023-02-22T08:00:00', '2023-02-22T08:00:00'),
(28, 2, 5, 2, 'ON', '2023-02-22T08:00:00', '2023-02-22T08:00:00'),
(1, 3, 10, 1, 'ON', '2023-08-26T08:00:00', '2023-08-26T08:00:00'),
(36, 1, 7, 2, 'ON', '2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(17, 1, 10, 1, 'ON', '2023-08-26T08:00:00', '2023-08-26T08:00:00'),
(37, 2, 1, 2, 'ON', '2023-12-27T08:00:00', '2023-12-27T08:00:00'),
(17, 4, 4, 3, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(32, 4, 3, 2, 'ON', '2023-05-19T08:00:00', '2023-05-19T08:00:00'),
(13, 3, 2, 2, 'ON', '2023-12-15T08:00:00', '2023-12-15T08:00:00'),
(14, 1, 3, 2, 'ON', '2023-05-19T08:00:00', '2023-05-19T08:00:00'),
(40, 4, 9, 2, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(1, 2, 6, 2, 'ON', '2023-08-09T08:00:00', '2023-08-09T08:00:00'),
(27, 2, 1, 3, 'ON', '2023-12-27T08:00:00', '2023-12-27T08:00:00'),
(13, 4, 8, 3, 'ON', '2023-05-28T08:00:00', '2023-05-28T08:00:00'),
(29, 4, 6, 1, 'ON', '2023-08-09T08:00:00', '2023-08-09T08:00:00'),
(6, 3, 9, 2, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(4, 1, 3, 1, 'ON', '2023-05-19T08:00:00', '2023-05-19T08:00:00'),
(31, 4, 1, 1, 'ON', '2023-12-27T08:00:00', '2023-12-27T08:00:00'),
(11, 3, 5, 1, 'ON', '2023-02-22T08:00:00', '2023-02-22T08:00:00'),
(21, 4, 3, 1, 'ON', '2023-05-19T08:00:00', '2023-05-19T08:00:00'),
(8, 4, 10, 1, 'ON', '2023-08-26T08:00:00', '2023-08-26T08:00:00'),
(26, 3, 10, 1, 'ON', '2023-08-26T08:00:00', '2023-08-26T08:00:00'),
(32, 2, 7, 2, 'ON', '2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(7, 4, 9, 1, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(26, 1, 8, 2, 'ON', '2023-05-28T08:00:00', '2023-05-28T08:00:00'),
(40, 1, 3, 1, 'ON', '2023-05-19T08:00:00', '2023-05-19T08:00:00'),
(14, 3, 1, 1, 'ON', '2023-12-27T08:00:00', '2023-12-27T08:00:00'),
(30, 3, 9, 3, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(30, 1, 5, 1, 'ON', '2023-02-22T08:00:00', '2023-02-22T08:00:00'),
(7, 2, 9, 3, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(32, 4, 8, 2, 'ON', '2023-05-28T08:00:00', '2023-05-28T08:00:00'),
(13, 4, 10, 3, 'ON', '2023-08-26T08:00:00', '2023-08-26T08:00:00'),
(35, 1, 5, 3, 'ON', '2023-02-22T08:00:00', '2023-02-22T08:00:00'),
(11, 1, 1, 3, 'ON', '2023-12-27T08:00:00', '2023-12-27T08:00:00'),
(23, 3, 4, 1, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(11, 2, 7, 2, 'ON', '2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(13, 2, 5, 1, 'ON', '2023-02-22T08:00:00', '2023-02-22T08:00:00'),
(26, 3, 10, 1, 'ON', '2023-08-26T08:00:00', '2023-08-26T08:00:00'),
(11, 4, 1, 1, 'ON', '2023-12-27T08:00:00', '2023-12-27T08:00:00'),
(11, 3, 1, 2, 'ON', '2023-12-27T08:00:00', '2023-12-27T08:00:00'),
(25, 2, 8, 2, 'ON', '2023-05-28T08:00:00', '2023-05-28T08:00:00'),
(25, 4, 10, 1, 'ON', '2023-08-26T08:00:00', '2023-08-26T08:00:00'),
(19, 1, 2, 3, 'ON', '2023-12-15T08:00:00', '2023-12-15T08:00:00'),
(33, 3, 4, 1, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(35, 1, 4, 3, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(21, 3, 4, 2, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(28, 1, 2, 1, 'ON', '2023-12-15T08:00:00', '2023-12-15T08:00:00'),
(14, 3, 2, 3, 'ON', '2023-12-15T08:00:00', '2023-12-15T08:00:00'),
(38, 1, 6, 2, 'ON', '2023-08-09T08:00:00', '2023-08-09T08:00:00'),
(4, 1, 7, 1, 'ON', '2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(13, 3, 4, 1, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(38, 1, 1, 1, 'ON', '2023-12-27T08:00:00', '2023-12-27T08:00:00'),
(40, 3, 4, 2, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(32, 4, 3, 2, 'ON', '2023-05-19T08:00:00', '2023-05-19T08:00:00'),
(11, 3, 3, 1, 'ON', '2023-05-19T08:00:00', '2023-05-19T08:00:00'),
(21, 3, 1, 3, 'ON', '2023-12-27T08:00:00', '2023-12-27T08:00:00'),
(17, 1, 4, 2, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(14, 4, 10, 3, 'ON', '2023-08-26T08:00:00', '2023-08-26T08:00:00'),
(4, 3, 4, 1, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(18, 2, 3, 1, 'ON', '2023-05-19T08:00:00', '2023-05-19T08:00:00'),
(4, 3, 9, 2, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(26, 1, 6, 2, 'ON', '2023-08-09T08:00:00', '2023-08-09T08:00:00'),
(20, 3, 7, 1, 'ON', '2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(9, 2, 7, 2, 'ON', '2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(4, 1, 5, 3, 'ON', '2023-02-22T08:00:00', '2023-02-22T08:00:00'),
(16, 4, 4, 1, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(35, 3, 3, 3, 'ON', '2023-05-19T08:00:00', '2023-05-19T08:00:00'),
(36, 2, 7, 3, 'ON', '2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(31, 1, 9, 3, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(17, 1, 7, 3, 'ON', '2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(26, 2, 9, 3, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(38, 2, 2, 1, 'ON', '2023-12-15T08:00:00', '2023-12-15T08:00:00'),
(27, 1, 10, 2, 'ON', '2023-08-26T08:00:00', '2023-08-26T08:00:00'),
(2, 1, 1, 1, 'ON', '2023-12-27T08:00:00', '2023-12-27T08:00:00'),
(39, 1, 10, 1, 'ON', '2023-08-26T08:00:00', '2023-08-26T08:00:00'),
(8, 2, 5, 3, 'ON', '2023-02-22T08:00:00', '2023-02-22T08:00:00'),
(15, 3, 6, 2, 'ON', '2023-08-09T08:00:00', '2023-08-09T08:00:00'),
(28, 3, 9, 2, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(2, 4, 6, 3, 'ON', '2023-08-09T08:00:00', '2023-08-09T08:00:00'),
(6, 4, 1, 3, 'ON', '2023-12-27T08:00:00', '2023-12-27T08:00:00'),
(13, 1, 10, 2, 'ON', '2023-08-26T08:00:00', '2023-08-26T08:00:00'),
(31, 1, 5, 3, 'ON', '2023-02-22T08:00:00', '2023-02-22T08:00:00'),
(13, 2, 7, 1, 'ON', '2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(24, 3, 2, 1, 'ON', '2023-12-15T08:00:00', '2023-12-15T08:00:00'),
(16, 4, 1, 3, 'ON', '2023-12-27T08:00:00', '2023-12-27T08:00:00'),
(33, 1, 7, 3, 'ON', '2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(25, 2, 2, 1, 'ON', '2023-12-15T08:00:00', '2023-12-15T08:00:00'),
(14, 3, 1, 2, 'ON', '2023-12-27T08:00:00', '2023-12-27T08:00:00'),
(38, 1, 4, 1, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(39, 4, 8, 3, 'ON', '2023-05-28T08:00:00', '2023-05-28T08:00:00'),
(31, 4, 10, 3, 'ON', '2023-08-26T08:00:00', '2023-08-26T08:00:00'),
(31, 1, 4, 1, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(19, 3, 9, 3, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(13, 4, 9, 1, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(6, 1, 9, 1, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(30, 1, 6, 1, 'ON', '2023-08-09T08:00:00', '2023-08-09T08:00:00'),
(14, 1, 7, 2, 'ON', '2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(22, 2, 10, 2, 'ON', '2023-08-26T08:00:00', '2023-08-26T08:00:00'),
(33, 3, 9, 2, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(29, 2, 5, 1, 'ON', '2023-02-22T08:00:00', '2023-02-22T08:00:00'),
(27, 4, 6, 2, 'ON', '2023-08-09T08:00:00', '2023-08-09T08:00:00'),
(6, 1, 3, 2, 'ON', '2023-05-19T08:00:00', '2023-05-19T08:00:00'),
(3, 2, 8, 1, 'ON', '2023-05-28T08:00:00', '2023-05-28T08:00:00'),
(2, 3, 9, 2, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(11, 3, 7, 3, 'ON', '2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(19, 3, 9, 1, 'ON', '2023-05-15T08:00:00', '2023-05-15T08:00:00'),
(30, 1, 8, 2, 'ON', '2023-05-28T08:00:00', '2023-05-28T08:00:00'),
(28, 4, 5, 1, 'ON', '2023-02-22T08:00:00', '2023-02-22T08:00:00'),
(16, 4, 4, 2, 'ON', '2023-03-11T08:00:00', '2023-03-11T08:00:00'),
(26, 3, 6, 2, 'ON', '2023-08-09T08:00:00', '2023-08-09T08:00:00'),
(39, 4, 1, 3, 'ON', '2023-12-27T08:00:00', '2023-12-27T08:00:00'),
(6, 2, 7, 3, 'ON', '2023-06-16T08:00:00', '2023-06-16T08:00:00'),
(3, 3, 6, 1, 'ON', '2023-08-09T08:00:00', '2023-08-09T08:00:00');


--housekeeping
DELETE FROM "Order"
DBCC CHECKIDENT ("Order", RESEED, 0);


--Trigger1: To switch status in shoppingCartItem to off after adding into orderDetail 
DROP TRIGGER ChangeStatusWhenAddToOrder;

CREATE TRIGGER ChangeStatusWhenAddToOrder
ON OrderDetail
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE ShoppingCartItem
    SET status = 'OFF'
    FROM ShoppingCartItem sci
    INNER JOIN OrderDetail od
    ON sci.shoppingCartItemId = od.shoppingCartItemId
    WHERE sci.status = 'ON';
END;


--House keeping
DELETE FROM dbo.[order];
DBCC CHECKIDENT ('dbo.[order]', RESEED, 0);
DELETE FROM dbo.OrderDetail;
DBCC CHECKIDENT ('OrderDetail', RESEED, 0);


--Insert Order table data by selecting and calculating from ShoppingCartItem table
INSERT INTO dbo.[Order] (customerId, orderValue, createTime, updateTime)
 SELECT customerId, 
  SUM(ISNULL(d.price, 0) * [count] * ISNULL(ds.discountLevel, 1) + 
   ISNULL(s.price, 0) * [count]) AS orderValue,
   sh.createTime, sh.updateTime 
 FROM dbo.shoppingCartItem sh
 LEFT JOIN dbo.dish d ON sh.dishId = d.dishId 
 LEFT JOIN dbo.discount ds ON d.dishDiscountId = ds.discountId 
 LEFT JOIN dbo.setMeal s ON sh.setMealId = s.setMealId 
 WHERE sh.status = 'ON'
 GROUP BY customerId, sh.createTime, sh.updateTime 
 ORDER BY customerId

ALTER TABLE orderDetail DROP CONSTRAINT checkOrderDetail_ShoppingCartItem;

--Insert OrderDetail table table by selecting from ShoppingCartItem and Order tables
 INSERT INTO dbo.orderDetail (shoppingCartItemId, orderId, createTime, updateTime)
 SELECT shoppingCartItemId, o.orderId, sh.createTime , sh.updateTime
 FROM [order] o
JOIN shoppingCartItem sh
 ON sh.customerId = o.customerId 
 AND sh.createTime = o.createTime
 AND sh.updateTime = o.updateTime
 

-- Insert billing data
insert into dbo.Billing (paymentMethod, orderId, status, createTime, updateTime)
SELECT 'Credit Card', o.orderId, 'COMPLETED',
   o.createTime, o.updateTime 
from dbo.[order] o
where o.orderId < 20
order by orderId
 
insert into dbo.Billing (paymentMethod, orderId, status, createTime, updateTime)
SELECT 'Cash', o.orderId, 'COMPLETED',
   o.createTime, o.updateTime 
from dbo.[order] o
where o.orderId BETWEEN 20 AND 40
order by orderId
 
insert into dbo.Billing (paymentMethod, orderId, status, createTime, updateTime)
SELECT 'PayPal', o.orderId, 'COMPLETED',
   o.createTime, o.updateTime 
from dbo.[order] o
where o.orderId BETWEEN 41 AND 60
order by orderId
 
insert into dbo.Billing (paymentMethod, orderId, status, createTime, updateTime)
SELECT 'Apple Pay', o.orderId, 'COMPLETED',
   o.createTime, o.updateTime 
from dbo.[order] o
where o.orderId BETWEEN 61 AND 80
order by orderId
 
insert into dbo.Billing (paymentMethod, orderId, status, createTime, updateTime)
SELECT 'Venmo', o.orderId, 'COMPLETED',
   o.createTime, o.updateTime 
from dbo.[order] o
where o.orderId > 80
order by orderId
 

------------------------------------------------ 4. Computed Columns based on a function ------------------------------------------------
-- Computed Column (totalPrice in Table Billing)
CREATE FUNCTION dbo.CalculateTotalPrice (@orderId int)
RETURNS DECIMAL(10, 2)
AS
BEGIN
    DECLARE @totalPrice DECIMAL(10, 2);

    SELECT @totalPrice = SUM(tax + tips + orderValue)
    FROM dbo.[Order]
    WHERE orderId = @orderId;

    RETURN ISNULL(@totalPrice, 0);
END;


ALTER TABLE dbo.Billing
ADD totalPrice AS dbo.CalculateTotalPrice(orderId);

-- Check computed column in Billing
SELECT *
FROM Billing

-- Housekeeping
ALTER TABLE dbo.Billing
DROP COLUMN totalPrice;
DROP FUNCTION CalculateTotalPrice;


--------------------------------------------------------------- 5. Views ----------------------------------------------------------------
-- View1: Monthly turnover 
CREATE VIEW MonthlyTurnover AS
	SELECT MONTH(CreateTime) AS Month, SUM(TotalPrice) AS MonthlyRevenue
	FROM dbo.Billing 
	WHERE Status = 'COMPLETED'
	GROUP BY MONTH(CreateTime);


-- View2: Monthly top 5 dishes
UPDATE OrderDetail 
SET Status = 'COMPLETED';

CREATE VIEW MonthlyTop5Dishes AS
	WITH Temp AS (
		SELECT MONTH(OD.CreateTime) AS [Month], DishName + ': ' + CAST(SUM([Count]) AS VARCHAR) AS DishData, 
			RANK() OVER(PARTITION BY MONTH(OD.CreateTime) ORDER BY SUM([Count]) DESC) AS [Rank]
		FROM dbo.OrderDetail OD
		JOIN dbo.ShoppingCartItem SHC
		ON OD.ShoppingCartItemId = SHC.ShoppingCartItemId
		JOIN dbo.Dish D
		ON SHC.DishId = D.DishId
		WHERE OD.Status = 'COMPLETED'
		GROUP BY MONTH(OD.CreateTime), SHC.DishId, DishName
	)
	SELECT [Month], STRING_AGG(DishData, ', ') AS [Top5SoldDishes(DishName: SoldQuantity)]
	FROM Temp 
	WHERE Rank <= 5
	GROUP BY [Month];

	
-- View3: Monthly top 5 setmeals
CREATE VIEW MonthlyTop5Setmeals AS
	WITH Temp AS (
		SELECT MONTH(OD.CreateTime) AS [Month], SetmealName + ': ' + CAST(SUM([Count]) AS VARCHAR) AS SetmealData, 
			RANK() OVER(PARTITION BY MONTH(OD.CreateTime) ORDER BY SUM([Count]) DESC) AS [Rank]
		FROM dbo.OrderDetail OD
		JOIN dbo.ShoppingCartItem SHC
		ON OD.ShoppingCartItemId = SHC.ShoppingCartItemId
		JOIN dbo.SetMeal S
		ON SHC.SetmealId = S.SetmealId
		WHERE OD.Status = 'COMPLETED'
		GROUP BY MONTH(OD.CreateTime), SHC.SetmealId, SetmealName
	)
	SELECT [Month], STRING_AGG(SetmealData, ', ') AS [Top5SoldSetmeals(SetmealName: SoldQuantity)]
	FROM Temp 
	WHERE Rank <= 5
	GROUP BY [Month];

-- Check view
SELECT * FROM MonthlyTurnover;
SELECT * FROM MonthlyTop5Dishes;
SELECT * FROM MonthlyTop5Setmeals;

-- Housekeeping
DROP VIEW MonthlyTurnover;
DROP VIEW MonthlyTop5Dishes;
DROP VIEW MonthlyTop5Setmeals;